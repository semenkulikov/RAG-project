#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã 403 —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
"""

import os
import requests
from dotenv import load_dotenv
from loguru import logger

def check_gemini_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini API –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
    
    logger.info("üåç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini API...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Google AI Studio
    try:
        response = requests.get("https://aistudio.google.com/", timeout=10)
        if response.status_code == 200:
            logger.success("‚úÖ Google AI Studio –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.error(f"‚ùå Google AI Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google AI Studio: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à IP –∏ —Ä–µ–≥–∏–æ–Ω
    try:
        ip_response = requests.get("https://ipapi.co/json/", timeout=5)
        if ip_response.status_code == 200:
            ip_data = ip_response.json()
            country = ip_data.get('country_name', 'Unknown')
            logger.info(f"üìç –í–∞—à —Ä–µ–≥–∏–æ–Ω: {country}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            restricted_regions = ['Russia', 'Belarus', 'Iran', 'North Korea', 'Cuba']
            if country in restricted_regions:
                logger.error(f"‚ùå –í–∞—à —Ä–µ–≥–∏–æ–Ω ({country}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è Gemini API")
                logger.info("üîß –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN")
                logger.info("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã: –°–®–ê, –ö–∞–Ω–∞–¥–∞, –ì–µ—Ä–º–∞–Ω–∏—è, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è")
                return False
            else:
                logger.success(f"‚úÖ –†–µ–≥–∏–æ–Ω {country} –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è")
                return True
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω")
            return True
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Gemini API")
    logger.info("=" * 50)
    
    available = check_gemini_availability()
    
    logger.info("=" * 50)
    if available:
        logger.success("‚úÖ Gemini API –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞")
        logger.info("üîß –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞ 403:")
        logger.info("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞")
        logger.info("   2. –í–∫–ª—é—á–∏—Ç–µ –±–∏–ª–ª–∏–Ω–≥ –≤ Google Cloud Console")
        logger.info("   3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏ –∫–ª—é—á")
    else:
        logger.error("‚ùå –í–∞—à —Ä–µ–≥–∏–æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è Gemini API")
        logger.info("üîß –†–ï–®–ï–ù–ò–Ø:")
        logger.info("   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN (–°–®–ê/–ï–≤—Ä–æ–ø–∞)")
        logger.info("   2. –í–∫–ª—é—á–∏—Ç–µ –±–∏–ª–ª–∏–Ω–≥ –≤ Google Cloud Console")
        logger.info("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ChatGPT API (—É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤)")

if __name__ == "__main__":
    main()
