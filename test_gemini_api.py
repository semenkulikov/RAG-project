#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Gemini API –∫–ª—é—á–∞
"""

import os
import sys
from dotenv import load_dotenv
import google.generativeai as genai
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stderr, level="INFO", format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>")

def test_gemini_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv("GEMINI_API_KEY")
    
    if not api_key:
        logger.error("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        logger.info("üîß –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–æ–π:")
        logger.info("   GEMINI_API_KEY=–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å")
        return False
    
    logger.info(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...{api_key[-4:]}")
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
        genai.configure(api_key=api_key)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API...")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        test_prompt = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ: —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ API?"
        response = model.generate_content(test_prompt)
        
        if response.text:
            logger.success("‚úÖ Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            logger.info(f"üìù –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {response.text.strip()}")
            return True
        else:
            logger.error("‚ùå Gemini API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return False
            
    except Exception as e:
        error_msg = str(e)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini API: {e}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if "403" in error_msg or "Forbidden" in error_msg:
            logger.error("üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (403):")
            logger.error("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞")
            logger.error("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –≤ Google AI Studio")
            logger.error("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
            logger.error("   4. –í–∫–ª—é—á–∏—Ç–µ –±–∏–ª–ª–∏–Ω–≥ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ")
            logger.error("")
            logger.error("üîç –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É:")
            logger.error("   python diagnose_gemini_403.py")
            logger.error("")
            logger.error("üåç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–≥–∏–æ–Ω:")
            logger.error("   python check_gemini_region.py")
            
        elif "User location is not supported" in error_msg:
            logger.error("üåç –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–≥–∏–æ–Ω–æ–º:")
            logger.error("   1. –í–∞—à —Ä–µ–≥–∏–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
            logger.error("   2. –í–∫–ª—é—á–∏—Ç–µ –±–∏–ª–ª–∏–Ω–≥ –≤ Google Cloud Console")
            logger.error("   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞")
            
        elif "quota" in error_msg.lower() or "limit" in error_msg.lower():
            logger.error("üìä –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–≤–æ—Ç–∞–º–∏:")
            logger.error("   1. –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
            logger.error("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–≤–æ—Ç—ã –≤ Google Cloud Console")
            logger.error("   3. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤")
            
        elif "invalid" in error_msg.lower() or "malformed" in error_msg.lower():
            logger.error("üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª—é—á–æ–º:")
            logger.error("   1. API –∫–ª—é—á –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
            logger.error("   2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –≤ Google AI Studio")
            logger.error("   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –∫–ª—é—á –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            
        else:
            logger.error("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:")
            logger.error(f"   {error_msg}")
            
        return False

def test_advanced_features():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Gemini"""
    
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        return False
        
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...")
        
        # –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è JSON
        json_test_prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        
        –¢–µ–∫—Å—Ç: "–°—É–¥ –ø–æ—Å—Ç–∞–Ω–æ–≤–∏–ª –≤–∑—ã—Å–∫–∞—Ç—å —Å –æ—Ç–≤–µ—Ç—á–∏–∫–∞ 100000 —Ä—É–±–ª–µ–π –≤ –ø–æ–ª—å–∑—É –∏—Å—Ç—Ü–∞."
        
        –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: decision, amount, currency, parties.
        """
        
        response = model.generate_content(json_test_prompt)
        
        if response.text and "{" in response.text:
            logger.success("‚úÖ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            logger.info(f"üìù JSON –æ—Ç–≤–µ—Ç: {response.text.strip()[:200]}...")
        else:
            logger.warning("‚ö†Ô∏è JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
            
        # –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        long_text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç. " * 100  # ~2000 —Å–∏–º–≤–æ–ª–æ–≤
        long_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ: {long_text}"
        
        response = model.generate_content(long_prompt)
        
        if response.text:
            logger.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏")
            
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Gemini API")
    logger.info("=" * 50)
    
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
    basic_test = test_gemini_api()
    
    if basic_test:
        logger.info("=" * 50)
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        advanced_test = test_advanced_features()
        
        logger.info("=" * 50)
        if advanced_test:
            logger.success("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Gemini API –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            logger.warning("‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.")
    else:
        logger.error("üí• –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º.")
        
    logger.info("=" * 50)
    logger.info("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é API –∫–ª—é—á–∞:")
    logger.info("   1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://aistudio.google.com/")
    logger.info("   2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π")
    logger.info("   3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'Get API key'")
    logger.info("   4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á")
    logger.info("   5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –≤ —Ñ–∞–π–ª .env –∫–∞–∫ GEMINI_API_KEY=–≤–∞—à_–∫–ª—é—á")

if __name__ == "__main__":
    main()
