#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ 403 Gemini API
"""

import os
import sys
import requests
import json
from dotenv import load_dotenv
import google.generativeai as genai
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stderr, level="INFO", format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>")

def check_api_key_format():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞"""
    load_dotenv()
    api_key = os.getenv("GEMINI_API_KEY")
    
    if not api_key:
        logger.error("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    
    logger.info(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...{api_key[-4:]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if not api_key.startswith("AIza"):
        logger.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞! –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'AIza'")
        return False
    
    if len(api_key) < 35:
        logger.error("‚ùå –ö–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –î–æ–ª–∂–µ–Ω –±—ã—Ç—å ~39 —Å–∏–º–≤–æ–ª–æ–≤")
        return False
    
    logger.success("‚úÖ –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
    return True

def check_region_restrictions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
    logger.info("üåç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google AI Studio
        response = requests.get("https://aistudio.google.com/", timeout=10)
        if response.status_code == 200:
            logger.success("‚úÖ Google AI Studio –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.warning(f"‚ö†Ô∏è Google AI Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Google AI Studio: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
    try:
        ip_response = requests.get("https://ipapi.co/json/", timeout=5)
        if ip_response.status_code == 200:
            ip_data = ip_response.json()
            country = ip_data.get('country_name', 'Unknown')
            logger.info(f"üìç –í–∞—à IP: {ip_data.get('ip', 'Unknown')} ({country})")
            
            # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
            restricted_regions = ['Russia', 'Belarus', 'Iran', 'North Korea', 'Cuba']
            if country in restricted_regions:
                logger.error(f"‚ùå –í–∞—à —Ä–µ–≥–∏–æ–Ω ({country}) –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                logger.error("üîß –†–µ—à–µ–Ω–∏—è:")
                logger.error("   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –°–®–ê, –ï–≤—Ä–æ–ø–∞)")
                logger.error("   2. –í–∫–ª—é—á–∏—Ç–µ –±–∏–ª–ª–∏–Ω–≥ –≤ Google Cloud Console")
                return False
            else:
                logger.success(f"‚úÖ –†–µ–≥–∏–æ–Ω {country} –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    return True

def test_direct_api_call():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API"""
    load_dotenv()
    api_key = os.getenv("GEMINI_API_KEY")
    
    if not api_key:
        return False
    
    logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Gemini API...")
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
        genai.configure(api_key=api_key)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        response = model.generate_content("Hi")
        
        if response.text:
            logger.success("‚úÖ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            logger.error("‚ùå API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return False
            
    except Exception as e:
        error_msg = str(e)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞: {e}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
        if "403" in error_msg:
            logger.error("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ 403:")
            logger.error("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.error("   1. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
            logger.error("   2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞")
            logger.error("   3. –ö–ª—é—á –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            logger.error("   4. –ü—Ä–µ–≤—ã—à–µ–Ω—ã –∫–≤–æ—Ç—ã")
            logger.error("   5. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–∞")
            
        elif "quota" in error_msg.lower():
            logger.error("üìä –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–≤–æ—Ç–∞–º–∏")
            
        elif "permission" in error_msg.lower():
            logger.error("üîê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏")
            
        return False

def suggest_solutions():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
    logger.info("")
    
    logger.info("üîß –†–µ—à–µ–Ω–∏–µ 1: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –≤ Google AI Studio")
    logger.info("   1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://aistudio.google.com/")
    logger.info("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω")
    logger.info("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    logger.info("")
    
    logger.info("üåç –†–µ—à–µ–Ω–∏–µ 2: –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
    logger.info("   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –°–®–ê, –ö–∞–Ω–∞–¥–∞, –ï–≤—Ä–æ–ø–∞)")
    logger.info("   2. –ò–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ –±–∏–ª–ª–∏–Ω–≥ –≤ Google Cloud Console")
    logger.info("")
    
    logger.info("üí≥ –†–µ—à–µ–Ω–∏–µ 3: –í–∫–ª—é—á–∏—Ç–µ –±–∏–ª–ª–∏–Ω–≥")
    logger.info("   1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://console.cloud.google.com/")
    logger.info("   2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç")
    logger.info("   3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ë–∏–ª–ª–∏–Ω–≥'")
    logger.info("   4. –í–∫–ª—é—á–∏—Ç–µ –±–∏–ª–ª–∏–Ω–≥ (–¥–∞–∂–µ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞)")
    logger.info("")
    
    logger.info("üîÑ –†–µ—à–µ–Ω–∏–µ 4: –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
    logger.info("   1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ Google Cloud Console")
    logger.info("   2. –í–∫–ª—é—á–∏—Ç–µ Vertex AI API")
    logger.info("   3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á")
    logger.info("   4. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª")
    logger.info("")
    
    logger.info("üõ†Ô∏è –†–µ—à–µ–Ω–∏–µ 5: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã")
    logger.info("   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ChatGPT API (—É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤)")
    logger.info("   2. –ò–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ (Ollama, etc.)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logger.info("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ 403 Gemini API")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
    logger.info("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ API –∫–ª—é—á–∞")
    key_ok = check_api_key_format()
    logger.info("")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    logger.info("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    region_ok = check_region_restrictions()
    logger.info("")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API
    logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ API")
    api_ok = test_direct_api_call()
    logger.info("")
    
    # –ò—Ç–æ–≥–∏
    logger.info("=" * 60)
    logger.info("üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    
    if key_ok and region_ok and api_ok:
        logger.success("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! API –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å.")
    else:
        logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –°–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∏–∂–µ.")
        logger.info("")
        suggest_solutions()
    
    logger.info("=" * 60)

if __name__ == "__main__":
    main()
