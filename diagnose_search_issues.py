#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–∏—Å–∫–æ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from vector_database import VectorDatabase
from config import CHROMA_DB_PATH
from loguru import logger

def main():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–∏—Å–∫–æ–º"""
    logger.info("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–∏—Å–∫–æ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã
    if not os.path.exists(CHROMA_DB_PATH):
        logger.error(f"‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {CHROMA_DB_PATH}")
        logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python reindex_with_improved_labeling.py")
        return
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
        vector_db = VectorDatabase()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        info = vector_db.get_collection_info()
        logger.info(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {info}")
        
        if info.get('document_count', 0) == 0:
            logger.error("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!")
            logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python reindex_with_improved_labeling.py")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–∏—Å–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
        test_queries = [
            "–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫",
            "–¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏ –ø—Ä–æ–¥–∞–∂–∏",
            "—Å—É–¥ —Ä–µ—à–µ–Ω–∏–µ"
        ]
        
        for query in test_queries:
            logger.info(f"üìù –ó–∞–ø—Ä–æ—Å: {query}")
            
            # –ü–æ–∏—Å–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
            results_no_filter = vector_db.search_similar(query, n_results=3)
            logger.info(f"  –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞: –Ω–∞–π–¥–µ–Ω–æ {len(results_no_filter)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            for i, result in enumerate(results_no_filter, 1):
                meta = result.get('metadata', {})
                logger.info(f"    {i}. {meta.get('source_file', 'unknown')} - {meta.get('dispute_type', 'unknown')}")
            
            # –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º consumer_protection
            results_with_filter = vector_db.search_similar(query, n_results=3, dispute_type="consumer_protection")
            logger.info(f"  –° —Ñ–∏–ª—å—Ç—Ä–æ–º consumer_protection: –Ω–∞–π–¥–µ–Ω–æ {len(results_with_filter)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º contract_dispute
            results_with_filter2 = vector_db.search_similar(query, n_results=3, dispute_type="contract_dispute")
            logger.info(f"  –° —Ñ–∏–ª—å—Ç—Ä–æ–º contract_dispute: –Ω–∞–π–¥–µ–Ω–æ {len(results_with_filter2)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            logger.info("")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        logger.info("üìã –ü—Ä–æ–≤–µ—Ä—è—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        sample_results = vector_db.search_similar("—Ç–µ—Å—Ç", n_results=5)
        
        dispute_types = {}
        legal_areas = {}
        
        for result in sample_results:
            meta = result.get('metadata', {})
            dispute_type = meta.get('dispute_type', 'unknown')
            legal_area = meta.get('legal_area', 'unknown')
            
            dispute_types[dispute_type] = dispute_types.get(dispute_type, 0) + 1
            legal_areas[legal_area] = legal_areas.get(legal_area, 0) + 1
        
        logger.info(f"üìä –¢–∏–ø—ã —Å–ø–æ—Ä–æ–≤ –≤ –≤—ã–±–æ—Ä–∫–µ: {dispute_types}")
        logger.info(f"üìä –ü—Ä–∞–≤–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ –≤ –≤—ã–±–æ—Ä–∫–µ: {legal_areas}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –Ω—É–∂–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        if not dispute_types.get('consumer_protection', 0):
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å dispute_type='consumer_protection'")
            logger.info("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π")
        
        logger.info("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
