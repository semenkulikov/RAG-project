"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import os
import time
from data_processor import LegalDocumentProcessor
from simple_vector_db import SimpleVectorDatabase
from config import PDF_DIR, JSON_DIR

def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ RAG –°–ò–°–¢–ï–ú–´")
    print("="*50)
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    json_files = [f for f in os.listdir(JSON_DIR) if f.endswith('.json')]
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: {len(json_files)}")
    
    if len(json_files) == 0:
        print("‚ùå JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É PDF —Å–Ω–∞—á–∞–ª–∞.")
        return False
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    start_time = time.time()
    
    vector_db = SimpleVectorDatabase()
    vector_db.load_from_json_files(JSON_DIR)
    
    creation_time = time.time() - start_time
    info = vector_db.get_database_info()
    
    print(f"‚úÖ –ë–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ {creation_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {info['document_count']}")
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞:")
    
    test_queries = [
        "–¥–æ–≥–æ–≤–æ—Ä –∑–∞–π–º–∞",
        "–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ",
        "—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞",
        "–í–µ—Ä—Ö–æ–≤–Ω—ã–π –°—É–¥"
    ]
    
    for query in test_queries:
        print(f"\nüìù –ó–∞–ø—Ä–æ—Å: '{query}'")
        
        start_time = time.time()
        results = vector_db.search_similar(query, n_results=2)
        search_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {search_time:.3f}—Å, –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        
        for i, result in enumerate(results, 1):
            text_preview = result['text'][:60].replace('\n', ' ')
            similarity = result.get('similarity', 0)
            source = result['metadata'].get('source_file', 'unknown')
            print(f"   {i}. {text_preview}... ({similarity:.3f}) - {source}")
    
    print(f"\nüéâ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print(f"‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print(f"üöÄ –ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Gemini 2.5 Pro")
    
    return True

if __name__ == "__main__":
    quick_test()
