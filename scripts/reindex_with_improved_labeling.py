#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from data_processor import LegalDocumentProcessor
from vector_database import VectorDatabase
from config import PDF_DIR, JSON_DIR, CHROMA_DB_PATH
from loguru import logger

def main():
    """–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π")
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
    if os.path.exists(CHROMA_DB_PATH):
        logger.info(f"üóëÔ∏è –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É: {CHROMA_DB_PATH}")
        import shutil
        shutil.rmtree(CHROMA_DB_PATH)
    
    # –û—á–∏—â–∞–µ–º JSON —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏
    if os.path.exists(JSON_DIR):
        logger.info(f"üóëÔ∏è –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–µ JSON —Ñ–∞–π–ª—ã: {JSON_DIR}")
        import shutil
        shutil.rmtree(JSON_DIR)
        os.makedirs(JSON_DIR, exist_ok=True)
    
    # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π
    logger.info("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF —Ñ–∞–π–ª—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π...")
    processor = LegalDocumentProcessor(use_gemini_chunking=True)
    result = processor.process_all_pdfs(force=True)
    
    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['processed']} —Ñ–∞–π–ª–æ–≤, {result['skipped']} –ø—Ä–æ–ø—É—â–µ–Ω–æ, {result['errors']} –æ—à–∏–±–æ–∫")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
    logger.info("üîç –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π...")
    vector_db = VectorDatabase()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Ñ–∞–π–ª—ã
    load_result = vector_db.load_from_json_files(JSON_DIR)
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {load_result}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    info = vector_db.get_collection_info()
    logger.info(f"‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞: {info.get('document_count', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫...")
    
    test_queries = [
        "–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—Ç",
        "–¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ",
        "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ"
    ]
    
    for query in test_queries:
        logger.info(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query}")
        results = vector_db.search_similar(query, n_results=3)
        
        for i, result in enumerate(results, 1):
            meta = result.get('metadata', {})
            logger.info(f"  {i}. {meta.get('source_file', 'unknown')} - {meta.get('dispute_type', 'unknown')} - {meta.get('legal_area', 'unknown')}")
    
    logger.info("üéâ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    logger.info("üí° –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")

if __name__ == "__main__":
    main()
