"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ RAG —Å–∏—Å—Ç–µ–º—ã
1. –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤
2. –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
3. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import os
import time
from pathlib import Path
from data_processor import LegalDocumentProcessor
from vector_database import VectorDatabase
from simple_vector_db import SimpleVectorDatabase
from config import PDF_DIR, JSON_DIR, CHROMA_DB_PATH
from loguru import logger

class FullPipelineTest:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    def __init__(self):
        self.setup_logging()
        self.processor = None
        self.vector_db = None
        self.simple_db = None
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.add("./logs/full_pipeline_test.log", rotation="1 MB", level="INFO")
    
    def step1_process_pdfs(self):
        """–®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤"""
        print("\n" + "="*60)
        print("üîÑ –®–ê–ì 1: –û–ë–†–ê–ë–û–¢–ö–ê PDF –§–ê–ô–õ–û–í")
        print("="*60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PDF —Ñ–∞–π–ª–æ–≤
        pdf_files = [f for f in os.listdir(PDF_DIR) if f.lower().endswith('.pdf')]
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
        
        if not pdf_files:
            print("‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return False
        
        for pdf_file in pdf_files:
            print(f"   - {pdf_file}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        print("\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        self.processor = LegalDocumentProcessor()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤...")
        start_time = time.time()
        
        self.processor.process_all_pdfs(PDF_DIR, JSON_DIR)
        
        processing_time = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        json_files = [f for f in os.listdir(JSON_DIR) if f.endswith('.json')]
        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìÑ –°–æ–∑–¥–∞–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: {len(json_files)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–∞–π–ª—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for json_file in json_files:
            json_path = os.path.join(JSON_DIR, json_file)
            try:
                import json
                with open(json_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    info = data.get('processing_info', {})
                    print(f"   {json_file}:")
                    print(f"     - –ß–∞–Ω–∫–æ–≤: {info.get('total_chunks', 0)}")
                    print(f"     - –ü—Ä–∞–≤–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {info.get('total_positions', 0)}")
                    print(f"     - –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {info.get('text_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            except Exception as e:
                print(f"   {json_file}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")
        
        return len(json_files) > 0
    
    def step2_create_vector_database(self):
        """–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\n" + "="*60)
        print("üîÑ –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –í–ï–ö–¢–û–†–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("="*60)
        
        print("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        start_time = time.time()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.vector_db = VectorDatabase()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
            print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤...")
            self.vector_db.load_from_json_files(JSON_DIR)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            info = self.vector_db.get_collection_info()
            
            creation_time = time.time() - start_time
            
            print(f"\n‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ {creation_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:")
            print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {info['name']}")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {info['document_count']}")
            print(f"   - –ü—É—Ç—å –∫ –ë–î: {info['db_path']}")
            
            return info['document_count'] > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {e}")
            
            # –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            print("\nüîÑ –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é...")
            try:
                self.simple_db = SimpleVectorDatabase()
                self.simple_db.load_from_json_files(JSON_DIR)
                
                info = self.simple_db.get_database_info()
                print(f"‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞")
                print(f"üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {info['document_count']}")
                return True
                
            except Exception as e2:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏: {e2}")
                return False
    
    def step3_test_search(self):
        """–®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
        print("\n" + "="*60)
        print("üîÑ –®–ê–ì 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê")
        print("="*60)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –±–∞–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        db = self.vector_db if self.vector_db else self.simple_db
        if not db:
            print("‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            return False
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "–¥–æ–≥–æ–≤–æ—Ä –∑–∞–π–º–∞ –∏ —Ä–∞—Å–ø–∏—Å–∫–∞",
            "–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥",
            "–ø—Ä–∞–≤–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –í–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ –°—É–¥–∞",
            "—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞",
            "–≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É—â–µ—Ä–±–∞",
            "–∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω–∞—è –∂–∞–ª–æ–±–∞"
        ]
        
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º:\n")
        
        for i, query in enumerate(test_queries, 1):
            print(f"üìù –ó–∞–ø—Ä–æ—Å {i}: '{query}'")
            
            try:
                start_time = time.time()
                results = db.search_similar(query, n_results=3)
                search_time = time.time() - start_time
                
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_time:.3f} —Å–µ–∫—É–Ω–¥")
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
                
                if results:
                    for j, result in enumerate(results, 1):
                        text_preview = result['text'][:80].replace('\n', ' ')
                        
                        if hasattr(result, 'get') and 'similarity' in result:
                            score = result['similarity']
                            print(f"      {j}. {text_preview}... (—Å—Ö–æ–¥—Å—Ç–≤–æ: {score:.4f})")
                        else:
                            distance = result.get('distance', 0)
                            print(f"      {j}. {text_preview}... (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.4f})")
                        
                        metadata = result.get('metadata', {})
                        if metadata.get('source_file'):
                            print(f"         –ò—Å—Ç–æ—á–Ω–∏–∫: {metadata['source_file']}")
                        if metadata.get('chunk_type'):
                            print(f"         –¢–∏–ø: {metadata['chunk_type']}")
                else:
                    print("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                print()
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
        
        return True
    
    def step4_performance_analysis(self):
        """–®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n" + "="*60)
        print("üîÑ –®–ê–ì 4: –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*60)
        
        db = self.vector_db if self.vector_db else self.simple_db
        if not db:
            print("‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            return False
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        test_query = "–¥–æ–≥–æ–≤–æ—Ä –∑–∞–π–º–∞"
        times = []
        
        print(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (10 –∑–∞–ø—Ä–æ—Å–æ–≤)...")
        
        for i in range(10):
            start_time = time.time()
            results = db.search_similar(test_query, n_results=5)
            search_time = time.time() - start_time
            times.append(search_time)
        
        avg_time = sum(times) / len(times)
        min_time = min(times)
        max_time = max(times)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {avg_time:.3f} —Å–µ–∫—É–Ω–¥")
        print(f"   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_time:.3f} —Å–µ–∫—É–Ω–¥")
        print(f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_time:.3f} —Å–µ–∫—É–Ω–¥")
        print(f"   - –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {1/avg_time:.1f}")
        
        return True
    
    def step5_generate_report(self):
        """–®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìã –®–ê–ì 5: –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*60)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        pdf_files = [f for f in os.listdir(PDF_DIR) if f.lower().endswith('.pdf')]
        json_files = [f for f in os.listdir(JSON_DIR) if f.endswith('.json')]
        
        db = self.vector_db if self.vector_db else self.simple_db
        db_info = db.get_collection_info() if self.vector_db else db.get_database_info()
        
        print("üìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üìÅ PDF —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(pdf_files)}")
        print(f"   üìÑ JSON —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(json_files)}")
        
        if self.vector_db:
            print(f"   üóÑÔ∏è –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î: ChromaDB + SentenceTransformers")
            print(f"   üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î: {db_info.get('document_count', 0)}")
        else:
            print(f"   üóÑÔ∏è –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è (TF-IDF)")
            print(f"   üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î: {db_info.get('document_count', 0)}")
        
        print(f"\n‚úÖ –°–¢–ê–¢–£–° –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF: –†–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: –†–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤: –†–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   ‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –†–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: –†–∞–±–æ—Ç–∞–µ—Ç")
        
        print(f"\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –°–õ–ï–î–£–Æ–©–ï–ú–£ –≠–¢–ê–ü–£:")
        print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã")
        print(f"   ‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"   üîÑ –ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Gemini 2.5 Pro")
        
        return True
    
    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø RAG –°–ò–°–¢–ï–ú–´")
        print("="*60)
        
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —à–∞–≥–∏
        steps = [
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤", self.step1_process_pdfs),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î", self.step2_create_vector_database),
            ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞", self.step3_test_search),
            ("–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", self.step4_performance_analysis),
            ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞", self.step5_generate_report)
        ]
        
        results = {}
        
        for step_name, step_func in steps:
            try:
                result = step_func()
                results[step_name] = result
                if not result:
                    print(f"‚ùå –®–∞–≥ '{step_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")
                    break
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–≥–µ '{step_name}': {e}")
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {step_name}: {e}")
                results[step_name] = False
                break
        
        total_time = time.time() - start_time
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "="*60)
        print("üèÅ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        success_count = sum(1 for result in results.values() if result)
        total_count = len(results)
        
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —à–∞–≥–æ–≤: {success_count}/{total_count}")
        
        if success_count == total_count:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Gemini 2.5 Pro")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        
        return success_count == total_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FullPipelineTest()
    success = tester.run_full_test()
    
    if success:
        print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å google-generativeai")
        print("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á Gemini")
        print("3. –°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Gemini")
        print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    return success

if __name__ == "__main__":
    main()
