[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "rag-legal-generator"
version = "1.0.0"
description = "Система генерации юридических документов с использованием RAG"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "RAG System Team", email = "team@rag-system.com"}
]
maintainers = [
    {name = "RAG System Team", email = "team@rag-system.com"}
]
keywords = ["legal", "rag", "ai", "document-generation", "nlp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Legal Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Legal",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "fastapi>=0.68.0",
    "uvicorn[standard]>=0.15.0",
    "pymupdf>=1.20.0",
    "sentence-transformers>=2.2.0",
    "chromadb>=0.4.0",
    "scikit-learn>=1.0.0",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "google-generativeai",
    "openai>=1.0.0",
    "python-dotenv",
    "tqdm",
    "loguru",
    "jinja2",
    "python-docx>=1.2.0",
    "aiofiles>=23.0.0",
]

[project.optional-dependencies]
gpu = [
    "torch>=1.9.0",
    "torchvision>=0.10.0",
    "torchaudio>=0.9.0",
]
dev = [
    "pytest>=6.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.800",
    "pre-commit>=2.15.0",
]

[project.urls]
Homepage = "https://github.com/rag-system/legal-generator"
Documentation = "https://rag-system.github.io/legal-generator"
Repository = "https://github.com/rag-system/legal-generator"
Issues = "https://github.com/rag-system/legal-generator/issues"

[project.scripts]
rag-generator = "src.rag_system.legal_document_generator:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
