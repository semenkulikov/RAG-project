"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import json
from data_processor import LegalDocumentProcessor
from config import PDF_DIR, JSON_DIR

def test_data_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = LegalDocumentProcessor()
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É PDF
    test_pdf = os.path.join(PDF_DIR, "test_legal_document.pdf")
    
    if not os.path.exists(test_pdf):
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π PDF –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {test_pdf}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
    result = processor.process_pdf_to_json(test_pdf)
    
    if not result:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –ù–æ–º–µ—Ä –¥–µ–ª–∞: {result['metadata']['case_number']}")
    print(f"   - –°—É–¥: {result['metadata']['court']}")
    print(f"   - –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {result['metadata']['document_type']}")
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {result['processing_info']['total_chunks']}")
    print(f"   - –ü—Ä–∞–≤–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {result['processing_info']['total_positions']}")
    print(f"   - –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {result['processing_info']['text_length']} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = os.path.join(JSON_DIR, "test_result.json")
    processor.save_json(result, output_file)
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —á–∞–Ω–∫–∞
    if result['chunks']:
        print(f"\nüìù –ü—Ä–∏–º–µ—Ä —á–∞–Ω–∫–∞:")
        print(f"   {result['chunks'][0]['text'][:100]}...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    if result['legal_positions']:
        print(f"\n‚öñÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
        for i, pos in enumerate(result['legal_positions'][:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
            print(f"   {i+1}. {pos['text'][:80]}...")
    
    return True

if __name__ == "__main__":
    success = test_data_processing()
    if success:
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
